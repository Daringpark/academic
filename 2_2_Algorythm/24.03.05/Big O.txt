시간 복잡도 구하기
O(n) = Big O notation

Q1. T(n) = T(n-1) + 1 (n >= 1)
* T(0) = 1
T(1) = T(0) + 1 = 1 + 1 = 2
T(2) = T(1) + 1 = 2 + 1 = 3
T(n-1) = T(n-2) + 1 = n - 1 + 1 = n
T(n) = T(n-1) + 1 = n + 1
1. (O(T(n)) = n) == 2.(O(n) = n)

Q2. T(n) = T(n-1) + n (n >= 1)
* T(0) = 1
T(1) = T(0) + 1 = 1 + 1 = 2
T(2) = T(1) + 2 = 2 + 2 = 4
T(3) = T(2) + 3 = 4 + 3 = 7
T(n) = T(n-1) + n
T(n-1) = T(n-2) + n-1

T(n) = T(n-2) + n-1 + n
T(n) = T(n-k) + n-k+1 + n-k+2 + n-k+3 + ... + n
* k = n
T(n) = 1 + 1 + 2 + .... + n = n(n+1)/2 + 1
2. (O(T(n)) = n^2) == (O(n^2) = n^2)

Q3. T(n) = T(n-1) + logn (n >= 1)
* T(0) = 1
T(1) = T(0) + 0 = 1 + 0 = 1
T(2) = T(1) + log2 = 1 + log2
T(3) = T(2) + log3 = 1 + log2 + log3 = 1 + log6
T(n-1) = T(n-2) + log(n-1)
T(n) = T(n-1) + logn
T(n) = T(n-2) + log(n-1) + logn
T(n) = T(n-k) + log(n-k) + log(n-k+1) + ... logn
* k = n
T(n) = T(0) + logn! <= T(0) + nlogn
** T(n) = T(0) + logn + logn + logn + ... + logn = 1 + nlogn
3. (O(T(n)) = nlogn) == (O(nlogn) = nlogn)

Q4. T(n) = T(n/2) + 1
*T(1) = 1
T(n/2) = T(n/2^2) + 1
T(n) = T(n/2) + 1 = T(n/2^2) + 1 + 1
T(n) = T(n/2^k) + k
* 2^k = n -> k = log2n
T(n) = 1 + logn
4. (O(T(n)) = logn) == (O(logn) = logn)